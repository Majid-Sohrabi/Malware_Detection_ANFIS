function Result=Algorithm_TLBO(Model,Parameter)
tic;
FitnessFunction = @(Input) Model.FitnessFunction(Input);
Solution_lenght = Model.Solution_lenght;
Solution_Floor =  Model.Solution_Floor;
Solution_Ceil =   Model.Solution_Ceil;
%% TLBO Parameters
Iteration =1000;
Population_Number=50;
Solution.Position =[];
Solution.Cost = [];
Population = repmat(Solution, Population_Number, 1);
BestSol.Cost = inf;
% Initialize Population Members
for i=1:Population_Number
    if (i>1)
        Population(i).Position=unifrnd(Solution_Floor,Solution_Ceil,[1,Solution_lenght]);
    else
        Population(i).Position=ones([1,Solution_lenght]);
    end
    Population(i).Cost = FitnessFunction(Population(i).Position);
    if Population(i).Cost < BestSol.Cost
        BestSol = Population(i);
    end
end
BestCosts = zeros(Iteration,1);
Time=zeros(Iteration,1);
Time(1)=toc;
%% TLBO Main Loop
for it=1:Iteration
    tic;
    % Calculate Population Mean
    Mean = 0;
    for i=1:Population_Number
        Mean = Mean + Population(i).Position;
    end
    Mean = Mean/Population_Number;
    % Select Teacher
    Teacher = Population(1);
    for i=2:Population_Number
        if Population(i).Cost < Teacher.Cost
            Teacher = Population(i);
        end
    end
    % Teacher Phase
    for i=1:Population_Number
        % Create Empty Solution
        newsol = Solution;
        % Teaching Factor
        TF = randi([1 2]);
        % Teaching (moving towards teacher)
        newsol.Position = Population(i).Position ...
            + rand([1 , Solution_lenght]).*(Teacher.Position - TF*Mean);
        % Clipping
        newsol.Position = max(newsol.Position, Solution_Floor);
        newsol.Position = min(newsol.Position, Solution_Ceil);
        % Evaluation
        newsol.Cost = FitnessFunction(newsol.Position);
        % Comparision
        if newsol.Cost<Population(i).Cost
            Population(i) = newsol;
            if Population(i).Cost < BestSol.Cost
                BestSol = Population(i);
            end
        end
    end
    % Learner Phase
    for i=1:Population_Number
        A = 1:Population_Number;
        A(i)=[];
        j = A(randi(Population_Number-1));
        Step = Population(i).Position - Population(j).Position;
        if Population(j).Cost < Population(i).Cost
            Step = -Step;
        end
        % Create Empty Solution
        newsol = Solution;
        % Teaching (moving towards teacher)
        newsol.Position = Population(i).Position + rand([1 , Solution_lenght]).*Step;
        % Clipping
        newsol.Position = max(newsol.Position, Solution_Floor);
        newsol.Position = min(newsol.Position, Solution_Ceil);
        % Evaluation
        newsol.Cost = FitnessFunction(newsol.Position);
        % Comparision
        if newsol.Cost<Population(i).Cost
            Population(i) = newsol;
            if Population(i).Cost < BestSol.Cost
                BestSol = Population(i);
            end
        end
    end
    BestCosts(it) = BestSol.Cost;
    Time(it)=Time(it)+toc;
%      if(sum(Time)>=3600)
%          break;
%      end
    disp(['it = '  ,num2str(it) , 'Cost = ' , num2str(BestCosts(it))]);
end
%% Result
Result.BestSol=BestSol;
Result.Population=Population;
Result.BestCost=BestCosts;
Result.Time=Time;
end