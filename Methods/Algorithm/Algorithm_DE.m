function Result=Algorithm_DE(Model,Parameter)
disp('Starting DE ...');
tic;
%% Problem Definition
CostFunction=@(X) Model.Fitness(X);% Cost Function
nVar=Model.nVar;                   % Number of Decision Variables
VarSize=[1 nVar];                  % Size of Decision Variables Matrix
VarMin=Model.VarMin;               % Lower Bound of Variables
VarMax=Model.VarMax;               % Upper Bound of Variables
%% DE Parameters
MaxIt=1000;      % Maximum Number of Iterations
nPop=50;        % Population Size
beta_min=0.2;   % Lower Bound of Scaling Factor
beta_max=0.8;   % Upper Bound of Scaling Factor
pCR=0.1;        % Crossover Probability
%% Initialization
empty_individual.Position=[];
empty_individual.Cost=[];
BestSol.Cost=inf;
pop=repmat(empty_individual,nPop,1);
for i=1:nPop  
    if (i>1)
        pop(i).Position=unifrnd(VarMin,VarMax,VarSize);
    else
        pop(i).Position=ones(VarSize);
    end    
    pop(i).Cost=CostFunction(pop(i).Position);    
    if (pop(i).Cost<BestSol.Cost)
        BestSol=pop(i);
    end    
end
BestCost=zeros(MaxIt,1);
Time=zeros(MaxIt,1);
Time(1)=toc;
%% DE Main Loop
for it=1:MaxIt    
    tic;
    for i=1:nPop        
        x=pop(i).Position;        
        A=randperm(nPop);        
        A(A==i)=[];        
        a=A(1);   b=A(2);   c=A(3);                
        beta=unifrnd(beta_min,beta_max,VarSize);
        y=pop(a).Position+beta.*(pop(b).Position-pop(c).Position);        
        % Crossover
        z=zeros(size(x));
        j0=randi([1 numel(x)]);
        for j=1:numel(x)
            if j==j0 || rand<=pCR
                z(j)=y(j);
            else
                z(j)=x(j);
            end
        end        
        NewSol.Position=z;
        NewSol.Cost=CostFunction(NewSol.Position);        
        if NewSol.Cost<pop(i).Cost
            pop(i)=NewSol;            
            if pop(i).Cost<BestSol.Cost
                BestSol=pop(i);
            end
        end        
    end        
    BestCost(it)=BestSol.Cost;        
    Time(it)=Time(it)+toc;
    disp(['Iteration ' num2str(it) ': Best Cost = ' num2str(BestCost(it))]);    
end
%% Results
Result.BestSol=BestSol;
Result.Population=pop;
Result.BestCost=BestCost;
Result.Time=Time;
end