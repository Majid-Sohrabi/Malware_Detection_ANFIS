function Result=Algorithm_AIA(Model,Parameter)
%% Problem definition
tic;
disp('Starting AIA ...');
MaxIteration=1000;
Npop=50;
PNc=0.5;
costfunction=@(X)Model.Fitness(X);
Nc=floor(PNc*Npop);

nVar=Model.nVar;          % Number of Decision Variables
VarSize=[1 nVar];           % Size of Decision Variables Matrix
VarMin=Model.VarMin;      % Lower Bound of Variables
VarMax=Model.VarMax;      % Upper Bound of Variables
%% initialization
Immune.Position=[];
Immune.Cost=[];
pop=repmat(Immune,Npop,1);
pop(1).Position=ones(VarSize);
pop(1).Cost=costfunction(pop(1).Position);
for i=2:Npop    
    pop(i).Position=unifrnd(VarMin,VarMax,VarSize);
    pop(i).Cost=costfunction(pop(i).Position);
end
costs=[pop.Cost];
[costs locateofsortedcost]=sort(costs);
pop=pop(locateofsortedcost);
% Matrix to Hold Best Cost Values
BestCost=zeros(MaxIteration,1);
Time=zeros(MaxIteration,1);
Time(1)=toc;
%% Main Loop of AIA
for it=1:MaxIteration
    tic;
    % Select Nc of Best Immenue
    popab=pop(1:Nc);
    % Cloning
    Ncol=zeros(Nc,1);
    col=cell(Nc,1);
    for i=1:Nc
        Ncol(i)=(Nc-i+1);
        col{i}=repmat(popab(i),Ncol(i),1);
    end
    % Mutation
    newcol=cell(Nc,1);
    for i=1:Nc
        for j=1:Ncol(i)
            for k=1:i
                newcol{i}(j).Position=Mutation(col{i}(j).Position);
                newcol{i}(j).Cost=costfunction(newcol{i}(j).Position);
            end
        end
        newcol{i}=newcol{i}';
    end
    % sort mutation population
    betweenpop=cell2mat(newcol);
    costs=[betweenpop.Cost];
    [costs locateofsortedcost]=sort(costs);
    betweenpop=betweenpop(locateofsortedcost);
    % update intial population
    pop((Npop-Nc+1):end)=betweenpop(1:Nc);
    % sort initial population
    costs=[pop.Cost];
    [costs locateofsortedcost]=sort(costs);
    pop=pop(locateofsortedcost);
    % sort best cost
    BestCost(it)=pop(1).Cost;
    Time(it)=Time(it)+toc;
    disp(['It : ' , num2str(it),' Cost : ',num2str(pop(1).Cost)]);
end
disp('End of AIA.');
%% Show Result
Result.BestSol=pop(1);
Result.Population=pop;
Result.BestCost=BestCost;
Result.Time=Time;
end

function q=Mutation(q)
Point=randsample(1:length(q)-1,1);
q([Point,Point+1])=q([Point,Point+1]);
end