function Result=Algorithm_GA(Model,Parameter)
tic;
MaxIteration=1000;
Npop=50;
PCrossover=0.85;
PMutation=0.15;
SelectCoefficient=2;

nVar=Model.nVar;          
VarSize=[1 nVar];         
VarMin=Model.VarMin;     
VarMax=Model.VarMax;   
%% initialization
costfunction=@(X) Model.FitnessFunction(X);
NMutation=floor((PMutation*Npop));
NCrossover=2*round((PCrossover*Npop)/2);
individual.Position=[];
individual.Cost=[];
BestCost=zeros(MaxIteration,1);

%% Initial population
pop=repmat(individual,Npop,1);
pop(1).Position=ones(VarSize);
pop(1).Cost=costfunction(pop(1).Position);
for i=2:Npop
    pop(i).Position=unifrnd(VarMin,VarMax,VarSize);
    pop(i).Cost=costfunction(pop(i).Position);
end
Time=zeros(MaxIteration,1);
Time(1)=toc;
%% GA Main loop
for gen=1:MaxIteration
    tic;
    %% population Crossover
    popC=repmat(individual,NCrossover,1);
    for k=1:2:NCrossover
        i=zeros(1,2);
        i(1)=Selection_RouletteWheel(pop,SelectCoefficient);
        i(2)=Selection_RouletteWheel(pop,SelectCoefficient,i(1));            
        p=pop(i);
        [Ans1 Ans2]=Crossover(p);
        popC(k).Position=Ans1;
        popC(k+1).Position=Ans2;
        popC(k).Cost=costfunction(popC(k).Position);
        popC(k+1).Cost=costfunction(popC(k+1).Position);
    end
    %% population Mutation
    popM=repmat(individual,NMutation,1);
    for k=1:NMutation
        i=randsample(1:Npop,1);
        Answer=Mutation(pop(i).Position );
        popM(k).Position=Answer;
        popM(k).Cost=costfunction(popM(k).Position);
    end
    %% mearge
    for i=1:(length(pop)-1)
        for j=i+1:length(pop)
            if(sum(abs(pop(i).Position-pop(j).Position))<(10*eps))
            pop(i).Position=unifrnd(VarMin,VarMax,VarSize);     
            pop(i).Cost=costfunction(pop(i).Position);
            end
        end
    end
    %% Pool fusion & Selection Best Chromosome
    pop=[pop
        popC
        popM];
    costs=[pop.Cost];
    [costs locatsortedcost]=sort(costs);
    pop=pop(locatsortedcost);
    pop=pop(1:Npop);
    BestCost(gen)=pop(1).Cost;
    disp([' It : ',num2str(gen),' , Cost : ',num2str(pop(1).Cost)]);
    Time(gen)=Time(gen)+toc;
%     if(sum(Time)>=3600)
%         break;
%     end
end
Ans=BestCost(gen);
%% Show Result
Result.BestSol=pop(1);
Result.Population=pop;
Result.BestCost=BestCost;
Result.Time=Time;
end

%% Crossover_Uniform
function [Ans1 Ans2]=Crossover(p)
Rand=rand(1,length(p(1).Position));
Ans1=p(1).Position.*Rand+(1-Rand).*p(2).Position;
Ans2=p(2).Position.*Rand+(1-Rand).*p(1).Position;
end
%% Mutation_BigSwap
function q=Mutation(q)
Point=randsample(1:length(q)-1,1);
q([Point,Point+1])=q([Point,Point+1]);
end
%%
function Ans=Selection_RouletteWheel(pop,beta,lastSelected)        
    if(~((nargin~=2&&nargin==3 )||(nargin==2&&nargin~=3 )))
        error('Wrong input argument!');
    end
    Costs=[pop.Cost];
    P=exp(-beta*Costs/Costs(end));
    P=P/sum(P);
    c=cumsum(P);
    while(1)        
    r=rand;
    Ans=find(r<=c,1,'first');    
    if(nargin==2)
        break;
    end
    if(Ans~=lastSelected)
        break
    end
    end
end