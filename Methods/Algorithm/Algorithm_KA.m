function Result=Algorithm_KA(Model,Parameter)
tic;
disp('Starting KA ...');
MaxIteration=1000;
Nkeshtel=50;
Smax=10;
p1=0.25;
p2=0.6;
costfunction=@(Input) Model.FitnessFunction(Input);
Solution_lenght = Model.Solution_lenght;
Solution_Floor =  Model.Solution_Floor;
Solution_Ceil =   Model.Solution_Ceil;


%% Problem Definition

m1=round(p1*Nkeshtel);%Number of Best Answer population
m2=2*round((p2*Nkeshtel)/2);%Number of Middle Answer population
m3=Nkeshtel-(m1+m2);%Number of Worst Answer population
%% Intialization
individual.Position=[];
individual.Cost=[];
individual.NN=[];          %NearestNeighbor
Keshtel=repmat(individual,Nkeshtel,1);
% Intialize Population
for i=1:Nkeshtel
    %Intialize Position
    if i>1
        Keshtel(i).Position=unifrnd(Solution_Floor,Solution_Ceil,[1,Solution_lenght]);
    else
        Keshtel(i).Position=ones([1,Solution_lenght]);
    end    
    %Evaluation
    Keshtel(i).Cost=costfunction(Keshtel(i).Position);
end
costs=[Keshtel.Cost];
[i,sortorder]=sort(costs);
Keshtel=Keshtel(sortorder);
BestCost=zeros(MaxIteration,1);
%% Keshtel Main Loop
for it=1:MaxIteration
    %Population for N1 Section
    LuckyKeshtel=Keshtel(1:m1);
    for k=1:m1
        pop=Keshtel(k+1:end);
        LuckyKeshtel(k).NN=Keshtel_NearestNeighbor(LuckyKeshtel(k).Position,pop);
        S=1;
        while S<=2*Smax-1
            y.Position=Keshtel_Swirl(LuckyKeshtel(k),LuckyKeshtel(k).NN,S,Smax);
            y.Cost=costfunction(y.Position);
            if y.Cost<LuckyKeshtel(k).Cost
                LuckyKeshtel(k).Position=y.Position;
                LuckyKeshtel(k).Cost=y.Cost;
                LuckyKeshtel(k).NN=Keshtel_NearestNeighbor(LuckyKeshtel(k).Position,Keshtel);
                S=1;
            else
                S=S+1;
            end
        end
    end
    %Population for N2 Section
    popm2=repmat(individual,m2,1);
    for j=1:m2
        Temp=j+m1;
        i=randsample([1:Temp-1 Temp+1:Nkeshtel],2);%Random selection two element from population
        p=[Keshtel(Temp).Position ; Keshtel(i(1)).Position ; Keshtel(i(2)).Position];
        popm2(j).Position=Crossover(p);
        popm2(j).Cost=costfunction(popm2(j).Position);
    end
    %Population for N3 Section
    popm3=repmat(individual,m3,1);
    for j=1:m3
        popm3(j).Position=unifrnd(Solution_Floor, Solution_Ceil, [1 , Solution_lenght]);
        popm3(j).Cost=costfunction(popm3(j).Position);
    end
    %% New Population
    Keshtel=[LuckyKeshtel
        popm2
        popm3];
    costs=[Keshtel.Cost];
    [costs locatsortcost]=sort(costs);
    Keshtel=Keshtel(locatsortcost);
    BestCost(it)=Keshtel(1).Cost;
    disp(['it =' ,num2str(it) , 'Cost' , num2str(BestCost(it))]);
    
%     toc;
end
disp('End of KA.');
Ans=BestCost(it);
%% Show Result
%plot(BestCost);
end

function y=Keshtel_Swirl(LuckyKeshtel,Nearest,S,Smax)
D=LuckyKeshtel.Position- Nearest.Position;
if(mod(S,2)==0)
    y=Nearest.Position+floor(S/2)*(D/Smax);
else
    y=(Nearest.Position+2*D)-floor(S/2)*(D/Smax);
end
end

function y=Keshtel_NearestNeighbor(LuckyKeshtel,Keshtel)
N=numel(Keshtel);
d=zeros(1,N);
for j=1:N
    d(j)=sum(abs(LuckyKeshtel-Keshtel(j).Position));
end
[e,r]=min(d);
y=Keshtel(r);
end

function [Ans1 Ans2]=Crossover(p)
n=length(p);
Point=randsample(1:n-1,1);
q1=p(2,:);
q2=p(3,:);
Ans1=[q1(1:Point) q2(Point+1:n)];
Ans2=[q2(1:Point) q1(Point+1:n)]; 
end



