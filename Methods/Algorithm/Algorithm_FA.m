function Result=Algorithm_FA(Model,Parameter)
%% Problem Defenition
tic;
disp('Starting FA ...');
costfunction=@(X) Model.Fitness(X);
nVar=Model.nVar;
VarSize=[1 nVar];
VarMin=Model.VarMin;
VarMax=Model.VarMax;
%% Firefly Algorithm Parameters
maxgen=1000 ;
nfirefly=50 ;
gama=1 ;
m=2 ;
beta0=1 ;
alpha=0.3 ;
delta=0.1*(VarMax-VarMin) ;
delta2=0.1*(VarMax-VarMin) ;
%% Initialization
firefly.position=[] ;
firefly.cost=[] ;
pop=repmat(firefly,nfirefly,1) ;
pop(1).position=ones(VarSize);
pop(1).cost=costfunction(pop(1).position);
Bestsol=pop(1);
for i=2:nfirefly
    pop(i).position=unifrnd(VarMin,VarMax,VarSize);
    pop(i).cost=costfunction(pop(i).position) ;
    if pop(i).cost<=Bestsol.cost
        Bestsol=pop(i) ;
    end
end
% matrix to hold best cost
Bestcost=zeros(maxgen,1) ;
Time=zeros(maxgen,1) ;
Time(1)=toc;
%% FA main loop
for gen=1:maxgen
    tic;
    newpop=pop ;
    for i=1:nfirefly
        for j=1:nfirefly
            if pop(j).cost<=pop(i).cost
                beta=beta0*exp((-gama*norm(pop(j).position-newpop(i).position))^m) ;
                u=1:2:nVar ;
                r=2:2:nVar ;
                newpop(i).position(u)=pop(i).position(u)+beta*(pop(j).position(u)-...
                    pop(i).position(u))+alpha*unifrnd(-delta,delta,1,nVar/2);
                newpop(i).position(r)=pop(i).position(r)+beta*(pop(j).position(r)-...
                    pop(i).position(r))+alpha*unifrnd(-delta2,delta2,1,nVar/2);
                newpop(i).position(u)=max(newpop(i).position(u),VarMin) ;
                newpop(i).position(u)=min(newpop(i).position(u),VarMax) ;
                newpop(i).position(r)=max(newpop(i).position(r),VarMin) ;
                newpop(i).position(r)=min(newpop(i).position(r),VarMax) ;
                newpop(i).cost=costfunction(newpop(i).position) ;
                if newpop(i).cost<=Bestsol.cost
                    Bestsol=newpop(i) ;
                end
            end
        end
    end
    pop=[pop
        newpop] ;
    % sort population
    [s,sortorder]=sort([pop.cost]) ;
    pop=pop(sortorder) ;
    pop=pop(1:nfirefly) ;
    % store best cost ever iteration
    Bestcost(gen)=Bestsol.cost ;
    % show informwtion in ever iteration
    disp(['Generation (' num2str(gen) ') , Best Cost is : ' num2str(Bestcost(gen)) ]) ;
    %alpha=endalpha+((alpha-endalpha)*exp(-it)) ;
    Time(gen)=Time(gen)+toc;
end
disp('End of FA.');
%% Results
Result.BestSol=Bestsol;
Result.Population=pop;
Result.BestCost=BestCost;
Result.Time=Time;

end

function qnew=RandomSolution (model)
xmax=model.xmax ;
ymax=model.ymax ;
n=model.NMjadid ;
qnew=zeros(1,2*n) ;
for i=1:2:2*n
    qnew(i)=rand()*xmax ;
end
for i=2:2:2*n
    qnew(i)=rand()*ymax ;
end
end